



from keras import Sequential
from keras.layers import Dense, Activation, Conv2D, AveragePooling2D, Flatten, Activation, MaxPooling2D, BatchNormalization
from sklearn.model_selection import train_test_split
from keras import initializers
import sys
import keras


def get_model(name):
    if  "model_0b6f114d" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5, input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))  
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=3, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if  "model_9b8bdaab" in name:
        model = keras.Sequential() 
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ) ,kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros())) 
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=3, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if  "model_84c77206" in name:
        model = keras.Sequential()  
        model.add(keras.layers.Dense(units=5, input_shape=(2, ),  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))        
        model.add(keras.layers.Dense(units=3, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))        
        return model
    
    if  "model_0448d813" in name:
        model = keras.Sequential()  
        model.add(keras.layers.Dense(units=5, input_shape=(2, ),  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))           
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))            
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))           
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=3,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if  "model_661b4e86" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5, input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))  
        model.add(keras.layers.Dense(units=3,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))  

        return model

    if  "model_2569b90f" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5, input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))         
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        model.add(keras.layers.Dense(units=3, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid')) 
        return model
    
    if  "model_384108d9" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5, input_shape=(2, ), kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform( ), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform( ), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform( ), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform( ), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform( ), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform( ), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=3, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if  "model_mi_7" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3,  kernel_initializer = initializers.Constant(), bias_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if  "model_bd4e58b7" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=3,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if  "model_e706e7cd" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=3,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if  "model_e73037c2" in name :
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))        
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=3, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if  "model_f7e7b91b" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=3,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    if "model_al_13" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        return model
    
    if "simplednn_blob" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        return model
    
    if "model_mi_7" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.RandomUniform(), bias_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='normal')))
    
        return model
    
    if "model_mi_al_10" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.Zeros(), bias_initializer = initializers.Constant()))
        return model
    
    if "model_al_19" in name:
        model = keras.Sequential()       
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        return model
    
    if "model_ma_mi_7" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal')))
        return model
    
    if "model_mi_al_19" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='normal'), bias_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='normal')))
        return model
    
    if "model_mi_al_13" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.Ones(), bias_initializer = initializers.RandomUniform()))
        return model
    
    if "model_mi_al_16" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape=(2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=3, activation='sigmoid', kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='uniform'), bias_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal')))
        return model
        
