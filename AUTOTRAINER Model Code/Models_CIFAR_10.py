


#input_shape = None, 32, 32, 3)
import tensorflow as tf
from keras import Sequential
from keras.layers import Dense, Activation, Conv2D, AveragePooling2D, Flatten, Activation, MaxPooling2D, BatchNormalization
from sklearn.model_selection import train_test_split
from keras import initializers
from keras import regularizers
import sys
import keras


def get_model(name):
    if "model_1d575a45" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros() ))
        model.add(keras.layers.Activation('softmax'))
        return model

    if "model_4bc5fb07" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model

    if "model_5f14d739" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_9ebf5bd7" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_39a07f05" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    
    if "model_80a306a0" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model

    if "model_635723ea" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_b9f3dc4b" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros() ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_ca8d6662" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_da019d09" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_f0250c41" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_fff8290e" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "tmp_lenet5_cifar" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.RandomUniform( )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.RandomUniform( )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=32,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.RandomUniform( ), bias_initializer =initializers.Zeros()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_ma_al_22" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros() ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_al_13" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros( ) ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_mi_al_13" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.Ones(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.RandomNormal() ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_al_16" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros( ) ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_mi_al_19" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal') ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_mi_al_22" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.TruncatedNormal( ), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal') ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_al_19" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.Zeros() ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_mi_10" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.TruncatedNormal(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 ), bias_initializer =initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='uniform') ))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "lenet5" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape = (32, 32, 3), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01)))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=0.01 )))
        model.add(keras.layers.Activation('softmax'))
        return model
            
            
    
            

        