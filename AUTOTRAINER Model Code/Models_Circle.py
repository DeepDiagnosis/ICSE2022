
from keras import Sequential
from keras.layers import Dense, Activation, Conv2D, AveragePooling2D, Flatten, Activation, MaxPooling2D, BatchNormalization
from sklearn.model_selection import train_test_split
from keras import initializers
from keras import regularizers
import sys
import keras


def get_model(name):
    if  "model_0ae2cd88" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5, input_shape = (2, ),  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_0eb8d545" in name:
        model = keras.Sequential() 
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=1, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_01bb8f27" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=1, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_5ab0aeda" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_8de47bdc" in name:
        model = keras.Sequential() 
        model.add(keras.layers.Dense(units=5, input_shape = (2, ), kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_8e28bdef" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=1, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_9e7361d4" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if "model_46edb7df" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=1, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if "model_169a3fa1" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=1, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_205c07d5" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_636bde2e" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5, input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))        
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=1, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_10702695" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if "model_14989730" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if "model_c54b3d2e" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if "model_c632dcbd" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if "model_d064a5da" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('exponential'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_dd8c879b" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))  
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_e8a6e959" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    if "model_ebc164bf" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_f476c610" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_mi_al_13" in name:
        model = keras.Sequential()
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='uniform'), bias_initializer = initializers.RandomNormal()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_mi_7" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    if "model_al_10" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "simplednn" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_mi_al_16" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.TruncatedNormal(), bias_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='uniform') ))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_al_13" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_mi_al_19" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='normal'), bias_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_ma_7" in name:
        model = keras.Sequential()  
        model.add(keras.layers.Dense(units=5, input_shape = (2, ),  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    if "model_al_19" in name:
        model = keras.Sequential()    
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ), kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform'), bias_initializer = initializers.Zeros()))
        model.add(keras.layers.Activation('sigmoid'))
        return model
    
    if "model_mi_al_10" in name:
        model = keras.Sequential()   
        model.add(keras.layers.Dense(units=5,  input_shape = (2, ),kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=5,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='uniform')))
        model.add(keras.layers.Activation('tanh'))
        model.add(keras.layers.Dense(units=1, kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='normal'), bias_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='normal') ))
        model.add(keras.layers.Activation('sigmoid'))
        return model

    


    

        

        
        
