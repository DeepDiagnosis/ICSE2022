

from keras import Sequential
from keras.layers import Dense, Activation, Conv2D, AveragePooling2D, Flatten, Activation, MaxPooling2D, BatchNormalization
from sklearn.model_selection import train_test_split
from keras import initializers
from keras import regularizers
import sys
import keras


def get_model(name):
    if  "model_2af630c4" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    
    if  "tmp_lenet5" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=32, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.RandomUniform( )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=64, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.RandomUniform( )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=64,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=32,  kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.RandomUniform()))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if  "model_44ae76ae" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if  "model_70e5f698" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if  "model_97f07775" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        model.summary()
        return model
    
    if  "model_ac055404" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('sigmoid'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_mi_al_19" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='uniform'), bias_initializer =  initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='uniform'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        
        return model
    
    if "model_ma_al_16" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_ma_mi_10" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.TruncatedNormal(), bias_initializer =  initializers.TruncatedNormal(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_al_22" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_mi_10" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.RandomNormal(), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_mi_al_13" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='uniform'), bias_initializer =  initializers.Ones(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_al_13" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "lenet_seed" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_al_16" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.Zeros(), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model

    if "model_mi_al_22" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='normal'), bias_initializer =  initializers.VarianceScaling( scale=1.0, mode='fan_avg', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model
    
    if "model_mi_al_16" in name:
        model = keras.Sequential()
        model.add(keras.layers.Conv2D(filters=6, input_shape=(28,28,1), kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Conv2D(filters=16, kernel_size=(5, 5),strides=(1, 1), padding="valid", data_format='channels_last',  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="valid", data_format='channels_last'))
        model.add(keras.layers.Flatten(data_format = 'channels_last'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=120,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=84,  kernel_initializer = initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('relu'))
        model.add(keras.layers.Dense(units=10, kernel_initializer = initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='normal'), bias_initializer =  initializers.VarianceScaling( scale=2.0, mode='fan_in', distribution='normal'), kernel_regularizer=regularizers.l1_l2(l1=0.0, l2=1e-4 )))
        model.add(keras.layers.Activation('softmax'))
        return model

    
    



   